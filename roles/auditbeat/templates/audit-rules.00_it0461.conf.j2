# IT 04.6.1 based rules and general hardening recommendations. Based
# on https://raw.githubusercontent.com/Neo23x0/auditd/master/audit.rules

# Self Auditing ---------------------------------------------------------------
# IT04.6.1 E

## Audit the audit logs
### Successful and unsuccessful attempts to read information from the audit records
-w /var/log/audit/ -k auditlog -k it0461e

## Auditd configuration
### Modifications to audit configuration that occur while the audit collection functions are operating
-w /etc/audit/ -p wa -k auditconfig -k it0461e
-w /etc/libaudit.conf -p wa -k auditconfig -k it0461e
-w /etc/audisp/ -p wa -k auditconfig -k it0461e

## Monitor for use of audit management tools
{% for f in auditd_bins.files|sort(attribute='path') if f.isreg %}
-w {{ f.path }} -p x -k audittools -k it0461e
{% endfor %}

## Auditbeat
-w /etc/auditbeat/auditbeat.yml -p wa -k auditconfig -k it0461e
-w /etc/auditbeat/audit.rules.d/ -p wa -k auditconfig -k it0461e
-w /var/log/auditbeat/ -k auditlog -k it0461e
{% for f in auditbeat_bins.files|sort(attribute='path') if f.isreg %}
-w {{ f.path }} -p x -k audittools -k it0461e
{% endfor %}

# Filters ---------------------------------------------------------------------

### We put these early because audit is a first match wins system.

## Ignore SELinux AVC records
-a always,exclude -F msgtype=AVC

## Ignore current working directory records
-a always,exclude -F msgtype=CWD

## Ignore EOE records (End Of Event, not needed)
-a always,exclude -F msgtype=EOE

## Cron jobs fill the logs with stuff we normally don't want (works with SELinux)
-a never,user -F subj_type=crond_t
-a exit,never -F subj_type=crond_t

## This prevents timesync from overwhelming the logs
{% if 'chrony' in getent_passwd %}
-a never,exit -F arch=b64 -S adjtimex -F auid=unset -F uid=chrony -F subj_type=chronyd_t
{% endif %}
{% if 'systemd-timesync' in getent_passwd %}
-a never,exit -F arch=b64 -S adjtimex -F auid=unset -F uid=systemd-timesync
{% endif %}
{% for f in vmtooolsd_bins.files|sort(attribute='path') if f.isreg %}
-a never,exit -F arch=b64 -S adjtimex -F auid=unset -F subj_type=vmtools_t -F path={{ f.path }}
{% endfor %}

## This is not very interesting and wastes a lot of space if the server is public facing
-a always,exclude -F msgtype=CRYPTO_KEY_USER

## VMWare tools
-a exit,never -F arch=b32 -S fork -F success=0 -F path=/usr/lib/vmware-tools -F subj_type=initrc_t -F exit=-2
-a exit,never -F arch=b64 -S fork -F success=0 -F path=/usr/lib/vmware-tools -F subj_type=initrc_t -F exit=-2

### High Volume Event Filter (especially on Linux Workstations)
-a exit,never -F arch=b32 -F dir=/dev/shm -k sharedmemaccess
-a exit,never -F arch=b64 -F dir=/dev/shm -k sharedmemaccess
-a exit,never -F arch=b32 -F dir=/var/lock/lvm -k locklvm
-a exit,never -F arch=b64 -F dir=/var/lock/lvm -k locklvm

## More information on how to filter events
### https://access.redhat.com/solutions/2482221

# Rules -----------------------------------------------------------------------

## Time
### Local time zone
# IT04.6.1 N
-w /etc/localtime -p wa -k time -k it0461n

## Cron configuration & scheduled jobs
# IT04.6.1 H
-w /etc/cron.allow -p wa -k cron -k it0461h
-w /etc/cron.deny -p wa -k cron -k it0461h
-w /etc/cron.d/ -p wa -k cron -k it0461h
-w /etc/cron.daily/ -p wa -k cron -k it0461h
-w /etc/cron.hourly/ -p wa -k cron -k it0461h
-w /etc/cron.monthly/ -p wa -k cron -k it0461h
-w /etc/cron.weekly/ -p wa -k cron -k it0461h
-w /etc/crontab -p wa -k cron -k it0461h
{% for d in crontab_spool.files|sort(attribute='path') if d.isdir %}
-w {{ d.path }}/ -p wa -k cron -k it0461h
{% else %}
-w /var/spool/cron/ -p wa -k cron -k it0461h
{% endfor %}
{% for d in atjob_spool.files|sort(attribute='path') if d.isdir %}
-w {{ d.path }}/ -p wa -k cron -k it0461h
{% endfor %}

## User, group, password databases
# IT04.6.1 B, C
-w /etc/group -p wa -k groupacct -k it0461c
-w /etc/passwd -p wa -k useracct -k it0461b
-w /etc/gshadow -k passwd_access -k passwd -k groupacct -k it0461c
-w /etc/shadow -k passwd_access -k passwd -k useracct -k it0461b
-w /etc/security/opasswd -k passwd -k groupacct -k useracct -k it0461b

## Sudoers file changes
# IT04.6.1 F
-w /etc/sudoers -p rwa -k privilege -k it0461f
-w /etc/sudoers.d/ -p rwa -k privilege -k it0461f

## Passwd
# IT04.6.1 K
{% for f in passwd_bins.files|sort(attribute='path') if f.isreg %}
-w {{ f.path }} -p x -k passwd -k useracct -k groupacct -k it0461k
{% endfor %}

## Tools to change group identifiers
# IT04.6.1 B, C
{% for f in usergroup_bins.files|sort(attribute='path') if f.isreg %}
-w {{ f.path }} -p x {% if 'group' in f.path %}-k groupacct -k it0461c{% else %}-k useracct -k it0461b{% endif %}
{% endfor %}

## Login configuration and information
# IT04.6.1 A
-w /etc/login.defs -p wa -k loginconfig -k it0461a
-w /etc/securetty -p wa -k loginconfig -k it0461a
-w /var/log/faillog -p wa -k loginlog -k it0461a
-w /var/log/lastlog -p wa -k loginlog -k it0461a
-w /var/log/tallylog -p wa -k loginlog -k it0461a

## Network Environment
# IT04.6.1 M
### Changes to other files
-w /etc/hosts -p wa -k network -k it0461m
-w /etc/hosts.allow -p wa -k network -k it0461m
-w /etc/hosts.deny -p wa -k network -k it0461m
{% for f in network_confs.files|sort(attribute='path') if (f.isreg or f.isdir) %}
-w {{ f.path }}{% if f.isdir %}/{% endif %} -p wa -k network -k it0461m
{% endfor %}
### Changes to issue
-w /etc/issue -p wa -k network -k it0461m
-w /etc/issue.net -p wa -k network -k it0461m

## Network commands
# IT04.6.1 M
{% for f in network_bins.files|sort(attribute='path') if f.isreg %}
-w {{ f.path }} -p x -k network -k it0461m
{% endfor %}

## Firewall
# IP04.6.1 J
{% for f in firewall_confs.files|sort(attribute='path') if (f.isreg or f.isdir) %}
-w {{ f.path }}{% if f.isdir %}/{% endif %} -p wa -k firewall -k network -k it0461j
{% endfor %}
{% for f in firewall_bins.files|sort(attribute='path') if f.isreg %}
-w {{ f.path }} -p x -k firewall -k network -k it0461j
{% endfor %}

## System startup scripts
# IT04.6.1 H
-w /etc/inittab -p wa -k initconfig -k it0461h
{% for d in startupscript_dirs.files|sort(attribute='path') if d.isdir %}
-w {{ d.path }}/ -p wa -k initconfig -k it0461h
{% endfor %}

## Pam configuration
# IT04.6.1 F
-w /etc/pam.d/ -p wa -k pamconfig -k loginconfig -k it0461f
-w /etc/security/ -p wa  -k pamconfig -k loginconfig -k it0461f

## SSH configuration
# IT04.6.1 E, F
-w /etc/ssh/sshd_config -k sshd -k loginconfig -k it0461e -k it0461f

{% if 'systemd' in packages %}
# Systemd
# IT04.6.1 I, H
-w /etc/systemd/ -p wa -k systemd -k it0461h
-w /usr/lib/systemd/system -p wa -k systemd -k it0461h
-w /usr/lib/systemd/user -p wa -k systemd -k it0461h
{% for f in systemd_bins.files|sort(attribute='path') if f.isreg %}
-w {{ f.path }} -p x -k systemd -k it0461h
{% endfor %}
{% endif %}

## SELinux events that modify the system's Mandatory Access Controls (MAC)
# IT04.6.1 F
-w /etc/selinux/ -p wa -k selinux -k it0461f

## Process ID change (switching accounts) applications
# IT04.6.1 G
{% for f in susudo_bins.files|sort(attribute='path') if f.isreg %}
-w {{ f.path }} -p x -k privilege_escalation -k it0461g
{% endfor %}

## Power state
# IT04.6.1 I
{% for f in powerstate_bins.files|sort(attribute='path') if f.isreg %}
-w {{ f.path }} -p -x -k power -k it0461i
{% endfor %}

## Session initiation information
# IT04.6.1 A
-w /var/run/utmp -p wa -k session -k loginlog -k it0461a
-w /var/log/btmp -p wa -k session -k loginlog -k it0461a
-w /var/log/wtmp -p wa -k session -k loginlog -k it0461a

# Special Rules ---------------------------------------------------------------

## Injection
### These rules watch for code injection by the ptrace facility.
### This could indicate someone trying to do something bad or just debugging
# IT04.6.1 G
-a always,exit -F arch=b32 -S ptrace -k tracing -k privilege_escalation -k it0461g
-a always,exit -F arch=b64 -S ptrace -k tracing -k privilege_escalation -k it0461g
-a always,exit -F arch=b32 -S ptrace -F a0=0x4 -k code_injection -k privilege_escalation -k it0461g
-a always,exit -F arch=b64 -S ptrace -F a0=0x4 -k code_injection -k privilege_escalation -k it0461g
-a always,exit -F arch=b32 -S ptrace -F a0=0x5 -k data_injection -k privilege_escalation -k it0461g
-a always,exit -F arch=b64 -S ptrace -F a0=0x5 -k data_injection -k privilege_escalation -k it0461g
-a always,exit -F arch=b32 -S ptrace -F a0=0x6 -k register_injection -k privilege_escalation -k it0461g
-a always,exit -F arch=b64 -S ptrace -F a0=0x6 -k register_injection -k privilege_escalation -k it0461g
